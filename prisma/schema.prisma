// говорит работать с js
// + будет ts типизация автоматически
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// создаем таблицу пользователей
model User {
  id Int @id @default(autoincrement()) // Int - только число, autoincrement() - автоматически id увеличивается на +1

  fullName  String
  email     String @unique
  password  String
  role      UserRole @default(USER)
  verified  DateTime?

  provider    String?
  providerId  String?

  cart Cart?
  orders Order[]
  verificationCode VerificationCode?

  createdAt  DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

// создаем таблицу категорий
model Category {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// создаем таблицу продуктов
model Product {
  id Int @id @default(autoincrement())

  name     String
  imageUrl String

  ingredients Ingredient[]

  items ProductItem[]

  category    Category @relation(fields: [categoryId], references: [id])
  categoryId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// создаем таблицу вариаций продукта
model ProductItem {
  id Int @id @default(autoincrement())

  price     Int
  size      Int? // опциональное свойство
  pizzaType Int? // опциональное свойство

  cartItems CartItem[]

  product Product @relation(fields: [productId], references: [id])
  productId Int
}

// создаем таблицу ингридиентов
model IngredientItem {
  id Int @id @default(autoincrement())

  name      String
  price     Int
  imageUrl  String

  products Product[]

  cartItems CartItem[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// создаем таблицу Корзина
model Cart {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int? @unique

  items CartItem[]

  token String // чтобы у незарегистрированных пользователей была корзина и они могли делать заказы

  totalAmount Int @default(0)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model CheckoutItem {
  id Int @id @default(autoincrement())

  cart Cart @relation(fields: [cartId], references: [id])
  cartId Int

  productItem ProductItem @relation(fields: [productItemId], references: [id])
  productItemId Int

  quantity Int @default(1)

  ingredients Ingredient[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// создаем таблицу заказа
model Order {
  id Int @id @default(autoincrement())

  user User? @relation(fields: [userId], references: [id])
  userId Int?

  token String

  totalAmount Int
  status      OrderStatus @default(PENDING)
  paymentId   String?

  items Json

  fullName  String
  email     String
  phone     String
  address   String
  comment   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

// создаем верификационный код
model VerificationCode {
  id Int @id @default(autoincrement())

  user User @relation(fields: [userId], references: [id])
  userId Int @unique

  code String

  createdAt DateTime @default(now())

  @@unique([userId, code])
}

model Story {
  id                Int @id @default(autoincrement())
  previewImageUrl   String
  items             StoryItem[]
  createdAt         DateTime @default(now())
}

model StoryItem {
  id                Int @default(autoincrement())

  storyId           Int
  story             Story @relation(fields: [storyId], references: [id])

  sourceUrl         String

  createdAt         DateTime @default(now())
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

enum UserRole {
  USER
  ADMIN
}